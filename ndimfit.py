import numpy as np
import math
np.set_printoptions(precision=10)


def caculationGaussian(value, mean, var):
    left = (1 / (np.sqrt(2 * np.pi * var)))
    exp_value = np.exp(-(np.power(value - mean, 2)) / (2 * var))
    pro = left * exp_value
    return pro


def caculationGaussian2(value, mean, stdev):
    exponent = np.exp(-(np.power(value - mean, 2)) / (2 * np.power(stdev, 2)))
    GaussProb = (1 / (np.sqrt(2 * np.pi) * stdev)) * exponent
    return GaussProb


if __name__ == '__main__':
    a = np.array([[1, 2, 3], [4, 5, 6]])
    n = 3
    print(a[:, :(n - 1)])
    print(a[:, n - 1])
    # print(a[1][2])
    a = 0.00004
    print(a)
    point = '.'
    if point in str(a):
        s = str(a).split('.')
        print(s[1])
        if float(s[1]) == 0:
            print('整数')
        else:
            print('小数')
    else:
        print('整数')

    att = ['a', 'b', 'b', 'b']

    print(att.count('b'))
    attclass = np.unique(att)
    labels = att # 转换为list类型
    labelset = np.unique(labels)
    P_y = {}  # 存入label的概率
    for label in labelset:
        P_y[label] = labels.count(label) / float(len(labels))  # p = count(y) / count(Y)
        print(label, P_y[label])


    X = np.array([
        [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3],
        [4, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 5, 5, 6, 6],
        [4, 1, 3, 4, 6, 1, 5, 3, 6, 6, 6, 5, 3, 2, 2]
    ])
    j=0
    for x in X[:]:
        j=j+1
        print(j)
        print(x)

    print(1/np.sqrt(4))
    print(np.square(2)/2)

    sample={'high': {0: {1: 0.03463203463203463, 2: 0.2943722943722944, 3: 0.38961038961038963, 4: 0.2813852813852814}, 1: {1: 0.00411522633744856, 2: 0.00823045267489712, 3: 0.06584362139917696, 4: 0.09053497942386832, 5: 0.09465020576131687, 6: 0.12345679012345678, 7: 0.11522633744855967, 8: 0.12757201646090535, 9: 0.13580246913580246, 10: 0.102880658436214, 11: 0.07818930041152264, 12: 0.053497942386831275}, 2: {0: 0.987012987012987, 1: 0.012987012987012988}, 3: {0: 0.12121212121212122, 1: 0.1341991341991342, 2: 0.1471861471861472, 3: 0.13852813852813853, 4: 0.15151515151515152, 5: 0.14285714285714285, 6: 0.1645021645021645}, 4: {0: 0.2987012987012987, 1: 0.7012987012987013}, 5: {1: 0.7649572649572649, 2: 0.23076923076923078, 3: 0.004273504273504274}, 6: {'mean': 0.5829700735930736, 'var': 0.01864345047178247}, 7: {'mean': 0.5516488051948051, 'var': 0.01390521250535166}, 8: {'mean': 0.6013163549783549, 'var': 0.014563798556107748}, 9: {'mean': 0.1775373199134199, 'var': 0.005164604686145403}}, 'low': {0: {1: 0.6893939393939394, 2: 0.13636363636363635, 3: 0.022727272727272728, 4: 0.15151515151515152}, 1: {1: 0.2569444444444444, 2: 0.19444444444444445, 3: 0.1388888888888889, 4: 0.06944444444444445, 5: 0.020833333333333332, 6: 0.006944444444444444, 7: 0.006944444444444444, 8: 0.013888888888888888, 9: 0.020833333333333332, 10: 0.05555555555555555, 11: 0.0625, 12: 0.1527777777777778}, 2: {0: 0.9545454545454546, 1: 0.045454545454545456}, 3: {0: 0.17424242424242425, 1: 0.12878787878787878, 2: 0.16666666666666666, 3: 0.14393939393939395, 4: 0.08333333333333333, 5: 0.10606060606060606, 6: 0.19696969696969696}, 4: {0: 0.4166666666666667, 1: 0.5833333333333334}, 5: {1: 0.4621212121212121, 2: 0.4166666666666667, 3: 0.12121212121212122}, 6: {'mean': 0.30119630833333333, 'var': 0.013132926177256832}, 7: {'mean': 0.2991370803030302, 'var': 0.011613575076393243}, 8: {'mean': 0.6426704015151512, 'var': 0.03231574321710395}, 9: {'mean': 0.2184275174242424, 'var': 0.0073968652732062865}}, 'median': {0: {1: 0.1688888888888889, 2: 0.27555555555555555, 3: 0.27111111111111114, 4: 0.28444444444444444}, 1: {1: 0.035555555555555556, 2: 0.07111111111111111, 3: 0.057777777777777775, 4: 0.07111111111111111, 5: 0.12444444444444444, 6: 0.09777777777777778, 7: 0.09777777777777778, 8: 0.09333333333333334, 9: 0.07111111111111111, 10: 0.08, 11: 0.10222222222222223, 12: 0.09777777777777778}, 2: {0: 0.9777777777777777, 1: 0.022222222222222223}, 3: {0: 0.1511111111111111, 1: 0.1511111111111111, 2: 0.15555555555555556, 3: 0.13333333333333333, 4: 0.12444444444444444, 5: 0.17333333333333334, 6: 0.1111111111111111}, 4: {0: 0.28444444444444444, 1: 0.7155555555555555}, 5: {1: 0.6444444444444445, 2: 0.3511111111111111, 3: 0.0044444444444444444}, 6: {'mean': 0.5304585911111113, 'var': 0.028979487337121697}, 7: {'mean': 0.5078691155555558, 'var': 0.022564494824484436}, 8: {'mean': 0.6440752977777777, 'var': 0.016176660707542437}, 9: {'mean': 0.18717444088888888, 'var': 0.005419704939918327}}}
    print(sample['high'])
    dic=sample['high'][7]
    print(sample['high'][7])
    print(dic.__contains__('mean'))
    print(dic.__contains__('1'))
    if(dic.__contains__('1')==False):
        print(sample['high'][7].keys())
    # print(sample['high'][7]['mean'])

    A=['low','high','low','mid','low','ab']
    B = ['low', 'mid', 'low','high','mid','ab']
    x = sum(1 for a, b in zip(A, B) if (a == b))
    print('x',x)

    print(caculationGaussian(12,25,4))
    print(caculationGaussian2(12, 25, 2))

    a=np.array([2,3,4,5,7,89,2])/float(2)
    c=a
    print(c)
    d=[]
    for e in c:
        print(math.ceil(e))
        d.append(math.ceil(e))
    print(d)
    for i in range(1,10+1):
        print(i)